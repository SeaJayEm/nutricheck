# Generated by Django 5.1.5 on 2025-02-11 16:10

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("url", models.URLField(max_length=500)),
                ("product_name", models.CharField(max_length=400)),
                ("quantity", models.CharField(blank=True, max_length=100, null=True)),
                ("brands", models.CharField(blank=True, max_length=400, null=True)),
                ("categories", models.TextField(blank=True, null=True)),
                ("origins", models.TextField(blank=True, null=True)),
                ("labels", models.TextField(blank=True, null=True)),
                ("stores", models.TextField(blank=True, null=True)),
                ("ingredients_text", models.TextField(blank=True, null=True)),
                ("ingredients_analysis_tags", models.TextField(blank=True, null=True)),
                ("allergens", models.TextField(blank=True, null=True)),
                ("traces", models.TextField(blank=True, null=True)),
                (
                    "serving_size",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("additives_en", models.TextField(blank=True, null=True)),
                ("nutriscore_score", models.FloatField(blank=True, null=True)),
                (
                    "nutriscore_grade",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("nova_group", models.FloatField(blank=True, null=True)),
                ("ecoscore_score", models.FloatField(blank=True, null=True)),
                (
                    "ecoscore_grade",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("nutrient_levels_tags", models.TextField(blank=True, null=True)),
                ("image_url", models.URLField(blank=True, max_length=500, null=True)),
                (
                    "image_ingredients_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "image_nutrition_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "fruits_vegetables_nuts_estimate_from_ingredients_100g",
                    models.FloatField(blank=True, null=True),
                ),
                ("energy_kcal_100g", models.FloatField(blank=True, null=True)),
                ("fat_100g", models.FloatField(blank=True, null=True)),
                ("cholesterol_100g", models.FloatField(blank=True, null=True)),
                ("saturated_fat_100g", models.FloatField(blank=True, null=True)),
                ("carbohydrates_100g", models.FloatField(blank=True, null=True)),
                ("sugars_100g", models.FloatField(blank=True, null=True)),
                ("fiber_100g", models.FloatField(blank=True, null=True)),
                ("proteins_100g", models.FloatField(blank=True, null=True)),
                ("salt_100g", models.FloatField(blank=True, null=True)),
                ("alcohol_100g", models.FloatField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("name_split", models.TextField(blank=True, null=True)),
                ("name_unique", models.TextField(blank=True, null=True)),
                ("name_ml", models.TextField(blank=True, null=True)),
                ("name_concat", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["product_name"],
            },
        ),
    ]
